datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  PROCESSED
  PROCESSING
  OUTDATED
  UNPROCESSED
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
  PENDING
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model YoutubePlaylist {
  id         String                @id @default(cuid())
  title      String
  playlistId String                @unique
  trackCount Int
  status     Status
  pages      YoutubePlaylistPage[]
}

model YoutubePlaylistPage {
  id                String           @id @default(cuid())
  pageToken         String           @unique
  pageNumber        Int
  youtubePlaylist   YoutubePlaylist? @relation(fields: [youtubePlaylistId], references: [id])
  youtubePlaylistId String?
}

model YoutubeChannel {
  id            String         @id @default(cuid())
  title         String
  channelId     String         @unique
  status        Status
  spotifyTracks SpotifyTrack[]
}

model YoutubeVideo {
  id             String         @id @default(cuid())
  title          String
  channelId      String
  youtubeVideoId String         @unique
  spotifyTracks  SpotifyTrack[]
  availability   Availability
}

model SpotifyTrack {
  id             String           @id @default(cuid())
  trackId        String?          @unique
  searchQuery    String
  youtubeVideoId String?
  youtubeChannel YoutubeChannel[]
  youtubeVideo   YoutubeVideo?    @relation(fields: [youtubeVideoId], references: [id])
  images         Json?
  artists        Json?
  name           String
  trackUrl       String?
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
