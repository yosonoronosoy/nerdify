datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  PROCESSED
  PROCESSING
  OUTDATED
  UNPROCESSED
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
  PENDING
}

model User {
  id               String                  @id @default(cuid())
  email            String                  @unique
  spotifyUserId    String                  @unique
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  trackRating      TrackRating[]
  favorites        Favorite[]
  youtubeChannels  UserOnYoutubeChannel[]
  youtubePlaylists UserOnYoutubePlaylist[]
}

model Favorite {
  id            String         @id @default(cuid())
  userId        String?        @unique
  youtubeVideos YoutubeVideo[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id])
}

model YoutubePlaylist {
  id            String                  @id @default(cuid())
  title         String
  playlistId    String                  @unique
  trackCount    Int
  status        Status
  pages         YoutubePlaylistPage[]
  youtubeVideos YoutubeVideo[]
  spotifyTracks SpotifyTrack[]
  user          UserOnYoutubePlaylist[]
}

model UserOnYoutubePlaylist {
  userId            String           @unique
  youtubePlaylistId String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User?            @relation(fields: [userId], references: [id])
  youtubePlaylist   YoutubePlaylist? @relation(fields: [youtubePlaylistId], references: [id])
  isFavorite        Boolean          @default(false)
  lastViewedAt      DateTime?        @default(now())

  @@id([userId, youtubePlaylistId])
}

model YoutubePlaylistPage {
  id                String           @id @default(cuid())
  pageToken         String           @unique
  pageNumber        Int
  youtubePlaylist   YoutubePlaylist? @relation(fields: [youtubePlaylistId], references: [id])
  youtubePlaylistId String?
}

model YoutubeChannel {
  id            String                 @id @default(cuid())
  title         String
  channelId     String                 @unique
  spotifyTracks SpotifyTrack[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  image         String?
  totalVideos   Int
  youtubeVideos YoutubeVideo[]
  users         UserOnYoutubeChannel[]
  status        Status                 @default(UNPROCESSED)
}

model UserOnYoutubeChannel {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @unique
  youtubeChannelId String
  youtubeChannel   YoutubeChannel @relation(fields: [youtubeChannelId], references: [id])
  isFavorite       Boolean        @default(false)
  lastViewedAt     DateTime?      @default(now())


  @@id([userId, youtubeChannelId])
}

model TrackRating {
  id             String        @id @default(cuid())
  rating         Int
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  youtubeVideoId String?
  youtubeVideo   YoutubeVideo? @relation(fields: [youtubeVideoId], references: [id])
  serviceTrackId String // i.e. youtubeVideoId || NTS trackId 
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model YoutubeVideo {
  id               String            @id @default(cuid())
  title            String
  channelId        String
  youtubeVideoId   String            @unique
  spotifyTracks    SpotifyTrack[]
  availability     Availability
  trackRating      TrackRating[]
  favorite         Favorite?         @relation(fields: [favoriteId], references: [id])
  favoriteId       String?
  youtubeChannel   YoutubeChannel?   @relation(fields: [youtubeChannelId], references: [id])
  youtubeChannelId String?
  youtubePlaylists YoutubePlaylist[]
}

model SpotifyTrack {
  id               String            @id @default(cuid())
  trackId          String?           @unique
  searchQuery      String
  youtubeVideoId   String?
  youtubeVideo     YoutubeVideo?     @relation(fields: [youtubeVideoId], references: [id])
  images           Json?
  artists          Json?
  name             String
  trackUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  levenshteinScore Int?
  availability     Availability      @default(PENDING) // FIX: REMOVE Availability
  youtubeChannels  YoutubeChannel[]
  youtubePlaylists YoutubePlaylist[]
}
